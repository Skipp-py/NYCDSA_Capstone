T.min.expenses = n.of.Positions*low_annual,
T.max.expenses = n.of.Positions*high_annual
) %>% group_by(Agency) %>%
summarise(
min_expenses = sum(T.min.expenses),
max_expenses = sum(T.max.expenses)
)
exp <- Jobs %>% select(Agency, n.Of.Positions, low_annual, high_annual) %>%
mutate(
T.min.expenses = n.Of.Positions*low_annual,
T.max.expenses = n.Of.Positions*high_annual
) %>% group_by(Agency) %>%
summarise(
min_expenses = sum(T.min.expenses),
max_expenses = sum(T.max.expenses)
)
head(exp, 5)
Jobs %>%  group_by(Civil.Service.Title) %>%
summarise(
max = max(range_annual),
min = min(range_annual)
)
Jobs %>%  group_by(Civil.Service.Title) %>%
summarise(
max = max(range_annual),
min = min(range_annual)
range = max - min
Jobs %>%  group_by(Civil.Service.Title) %>%
summarise(
max = max(range_annual),
min = min(range_annual),
range = max - min
) %>%
arrange(desc(range))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
?str_replace()
raw.df <- readr::read_csv("./data.csv")
colnames(raw.df) <- lapply(colnames(raw.df), tolower)
colnames(raw.df) <- str_replace(colnames(raw.df), " ", ".")
colnames(raw.df)
raw.df <- readr::read_csv("./data.csv")
View(raw.df)
?read_csv()
raw.df <- readr::read_csv("./data.csv", skip = 9, col_names = TRUE)
View(raw.df)
colnames(raw.df) <- lapply(colnames(raw.df), tolower)
colnames(raw.df) <- str_replace(colnames(raw.df), " ", ".")
colnames(raw.df)
raw.df$inspection.date <- as.Date(raw.df$inspection.date, format = "%m/%d/%Y")
raw.df$inspection.month <- format(raw.df$inspection.date, "%m")
?case_when
is.na(raw.df)
raw.df[is.na(raw.df)]
is.na(raw.df["grade"])
raw.df[is.na(raw.df["grade"])]
class(is.na(raw.df["grade"]))
is.na(raw.df["grade"]) = case_when(
raw.df["score"] < 14 ~ "A"
)
is.na(raw.df["grade"]) = case_when(
raw.df["score"] < 14 ~ "A"
)
raw.df["score"]
?ifelse
?case_when
df <- raw.df %>% mutate(
grade.new = ifelse(is.na(grade),
case_when(
0<=score<14 ~ "A",
x = 1
0<x<2
df <- raw.df %>% mutate(
grade.new = ifelse(is.na(grade),
case_when(
(0<=score) & (score <14) ~ "A",
#  14<=score<28 ~ "B",
# score >=28 ~"C"
),
grade)
)
df <- raw.df %>% mutate(
grade.new = ifelse(is.na(grade),
case_when(
(0<=score) & (score <14) ~ "A",
(14<=score) & (score <28) ~ "B",
(score >=28) ~"C"
),
grade)
)
View(df)
is.na(raw.df['grade'])
sum(is.na(raw.df['grade']))
sum(is.na(df['grade.new']))
df[is.na(grade.new)]
df %>% df[is.na(grade.new)]
df %>% df[is.na(df["grade.new"])]
df[is.na(df$grade.new),]
df[is.na(df$grade.new),] %>% select(grade, grade.new)
df[is.na(df$grade.new),] %>% select(grade, grade.new, score)
?gsub()
x = “Violations were cited in the following area(s).”
x = "Violations were cited in the following area(s)."
gsub("Violations.*","violations", fixed = TRUE)
gsub("Violations.*","violations",x, fixed = TRUE)
gsub("V.*","violations",x, fixed = TRUE)
gsub("^Violations","violations",x, fixed = TRUE)
gsub("^V.*$","violations",x, fixed = TRUE)
unique(df["action",]
)
head(df)
unique(df$action)
action.short$action.short <- c("violations", "closed", "reopened", "no violations", "NA", "reclosed", "closed")
action.short <- c("violations", "closed", "reopened", "no violations", "NA", "reclosed", "closed")
action <- unique(df$action)
action.short <- cbind(action.short, action)
action.short
raw.df.new <- left_join(df, action.short, by = "action")
colnames(df)
View(action.short)
View(df)
?left_join
colnames(action.short)
action.short <- c("violations", "closed", "reopened", "no violations", "NA", "reclosed", "closed")
action <- unique(df$action)
action.short <- cbind(action.short, action)
df.new <- left_join(df, action.short, by = "action")
rlong::last_error()
rLong::last_error()
rlong::last_error()
df$action
action.short$action
action.short <- data_frame(cbind(action.short, action))
df.new <- left_join(df, action.short, by = "action")
action.short$action
?data.frame
action.short <- data.frame(cbind(action.short, action), replace = TRUE)
View(action.short)
View(action.short)
?gsub
gsub("^Violation.*", "violations", df$action)
gsub("^V.*", "violations", df$action)
gsub("^V.*", "violations", df$action)
gsub("^N.*", "no violations")
df %>% gsub("^V.*", "violations", action)
gsub("^V.*", "violations", df$action)
gsub("[^.re-closed [^.]*\]*", "")
gsub("[^.re-closed [^.]*\.*", "")
gsub("[^.]* re-closed [^.]*\.", "")
gsub("[^.]* re-close [^.]*\.", "reclosed")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
#1.
library(Sleuth2)
case2002
data <- case2002
data <- case2002
View(data)
names(data)
summary(data)
data[1:4]
?lapply(list, function)
?lapply
apply(data[1:4], as.factor()
)
apply(data[1:4], as.factor)
sapply(data[1:4], as.factor)
data <- sapply(data[1:4], as.factor)
data
data <- cbind(sapply(data[1:4], as.factor), data[5:7])
names(data)
names(data)
data <- case2002
data <- case2002
names(data)
summary(data)
data$LC <- as.factor(data$LC)
plot(data[5:7], col = data$LC)
install.packages("optimx")
names(data)
summary(data)
data[cols] <- lapply(data[cols],as.factor)
cols <- c("LC", "LM", "SS","BK")
data[cols] <- lapply(data[cols],as.factor)
cols <- c("LC", "FM", "SS","BK")
data[cols] <- lapply(data[cols],as.factor)
model.saturated <- glm(LC ~ ., family = "binomial", data)
summary(model.saturated)
logit.overall <- glm(LC ~ ., family = "binomial", data)
scatter.smooth(logit.overall$fit,
residuals(logit.overall, type = "deviance"),
lpars = list(col = "red"),
llab = "Fitted  Probabilities",
ylab = "Deviance Residual Values",
main = "Residual Plot for\nLogistic Regression of Admission Data"
)
Summary(logit.overall)
summary(logit.overall)
logit.overall$deviance
chisq.test(logit.overall$null.deviance - logit.overall$deviance)
pchisq.test(logit.overall$null.deviance - logit.overall$deviance, 146-140)
pchisq(logit.overall$null.deviance - logit.overall$deviance, 146-140)
1-pchisq(logit.overall$null.deviance - logit.overall$deviance, 146-140)
names(data)
logit1 <- glm(LC ~ . -BK,family = "binomial", data )
summary(logit1)
p.overall <- 1-pchisq(logit.overall$null.deviance - logit.overall$deviance, 146-140)
p.nobk1-pchisq(logit.overall$null.deviance - logit.overall$deviance, 146-140)
p.nobk <- 1-pchisq(logit.overall$null.deviance - logit.overall$deviance, 146-141)
p.nobk
p.nobk <- 1-pchisq(logit1$null.deviance - logit1$deviance, 146-141)
p.nobk
logit2 <- glm(LC ~ BK + YR)
logit2 <- glm(LC ~ BK + YR, family = "binomial",
data)
summary(logit2)
p2 <- 1-pchisq(logit2$null.deviance - logit2$deviance, 146-141)
p2
logit.overall$deviance
logit2$deviance
logit2$null.deviance - logit2$deviance
logit.overall$null.deviance - logit.overall$deviance
AIC(logit.overall, logit1, logit2)
BIC(logit.overall, logit1, logit2)
AIC(logit.overall, logit1, logit2)
BIC(logit.overall, logit1, logit2)
?with()
summary(data)
newdata <- with(logit2, yr = mean(YR),
BK = as.factor("NoBird", "Bird"))
BK = as.factor("NoBird", "Bird")
BK = c("NoBird", "Bird")
BK
newdata <- with(logit2, yr = mean(YR),
BK = c("NoBird", "Bird"))
newdata <- with(logit2, data.frame(yr = mean(YR),
BK = c("NoBird", "Bird"))
)
newdata <- with(data, data.frame(yr = mean(YR),
BK = c("NoBird", "Bird")))
newdata
newdata <- with(data, data.frame(yr = mean(YR),
BK = c("NoBird", "Bird")))
newdata <- with(data, data.frame(YR = mean(YR),
BK = c("NoBird", "Bird")))
predict(logit2, newdata)
newdata <- with(data, data.frame(YR = mean(YR),
BK = as.factor(c("NoBird", "Bird"))))
predict(logit2, newdata)
exp(predict(logit2, newdata))/(1+exp(predict(logit2, newdata)))
#B
newdata <- with(data, data.frame(YR = 0),
BK = as.factor(c("NoBird", "Bird")))
#A
newdata1 <- with(data, data.frame(YR = mean(YR),
BK = as.factor(c("NoBird", "Bird"))))
exp(predict(logit2, newdata))/(1+exp(predict(logit2, newdata)))
exp(predict(logit2, newdata))/(1+exp(predict(logit2, newdata)))
exp(predict(logit2, newdata1))/(1+exp(predict(logit2, newdata1)))
exp(predict(logit2, newdata2))/(1+exp(predict(logit2, newdata2)))
#B
newdata2 <- with(data, data.frame(YR = 0),
BK = as.factor(c("NoBird", "Bird")))
exp(predict(logit2, newdata2))/(1+exp(predict(logit2, newdata2)))
newdata2
#B
newdata2 <- with(data, data.frame((YR = 0),
BK = as.factor(c("NoBird", "Bird")))
)
#A
newdata1 <- with(data, data.frame(YR = mean(YR),
#A
newdata1 <- with(data, data.frame(YR = mean(YR),
BK = as.factor(c("NoBird", "Bird"))))
)
)
#B
newdata2 <- with(data, data.frame(YR = 0,
BK = as.factor(c("NoBird", "Bird"))))
exp(predict(logit2, newdata2))/(1+exp(predict(logit2, newdata2)))
test.data <- data[c("YR","BK")]
predict(logit2, test.data)
exp(predict(logit2, test.data))/(1+exp(predict(logit2, test.data)))
predict(logit2, test.data, type = "response")
round(predict(logit2, test.data, type = "response"))
table(truth = data$LC, prediction = LC.predicted)
LC.predicted <- round(predict(logit2, test.data, type = "response"))
table(truth = data$LC, prediction = LC.predicted)
BIC(logit.overall, logit1, logit2)
AIC(logit.overall, logit1, logit2)
newdata1
table(data$LC)/nrow(data)
LC.predicted <- round(predict(logit2, test.data, type = "response"))
table(data$LC)/nrow(data)
accuracy(diag(table(truth = data$LC, prediction = LC.predicted, type = "response"))/nrow(data))
#If you implement correctly, the code below:
# install.packages('optimx')
library(optimx)
target <- function(pair) neg_log_likelihood(pair[1], pair[2])
ans <- optimx(par=c(-1,-1), fn = target)
print(ans$p1[1])
print(ans$p2[1])
p,LC = 1/(1+exp(-log_odd))
p.LC = 1/(1+exp(-log_odd))
neg_log_likelihood<-function(intercept, slope){
# Your code here
log_odd = intercept+slope*data$YR
p.LC = 1/(1+exp(-log_odd))
p.l = ifelse(data$LC == 'LunCancer',p.LC,1-p.LC)
-sum(log(p.l))
}
library(optimx)
target <- function(pair) neg_log_likelihood(pair[1], pair[2])
ans <- optimx(par=c(-1,-1), fn = target)
print(ans$p1[1])
print(ans$p2[1])
summary(logit2)
model = glm(LC ~ YR, family = "binomial", data = case2002)
summary(model)
model = glm(LC ~ YR, family = "binomial", data = case2002)
summary(model)
print(ans$p1[1])
print(ans$p2[1])
neg_log_likelihood<-function(intercept, slope){
# Your code here
log_odd = intercept+slope*data$YR
p.LC = 1/(1+exp(-log_odd))
p.l = ifelse(data$LC == 'LunCancer',p.LC,1-p.LC)
return(-sum(log(p.l)))
}
target <- function(pair) neg_log_likelihood(pair[1], pair[2])
ans <- optimx(par=c(-1,-1), fn = target)
print(ans$p1[1])
print(ans$p2[1])
model = glm(LC ~ YR, family = "binomial", data = case2002)
summary(model)
neg_log_likelihood(pair[1], pair[2])
target
ans
neg_log_likelihood(-1,-1)
intercept = -1
slope = -1
log_odd = intercept + slope*data$YR
log_odd
p.LC = 1/(1+exp(-log_odd))
p.LC
optimx(par = c(-1,-1))
optimx(par = c(-1,-1), fn = target)
#If you implement correctly, the code below:
# install.packages('optimx')
library(optimx)
target <- function(pair) neg_log_likelihood(pair[1], pair[2])
ans <- optimx(par=c(-1,-1), fn = target)
print(ans$p1[1])
print(ans$p2[1])
model = glm(LC ~ YR, family = "binomial", data = case2002)
summary(model)
e = 1e-8
e
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message=FALSE)
library(Sleuth2)
data(case2002)
View(case2002)
numerics <- unlist(lapply(case2002,is.numeric))
plot(case2002[,numerics], col = case2002$LC)
model = glm(LC ~ ., family = "binomial",data = case2002)
summary(model)
pchisq(model$deviance, model$df.residual, lower.tail = F)
model_no_bk = glm(LC ~ . -BK, family = "binomial",data = case2002)
summary(model_no_bk)
pchisq(model_no_bk$deviance, model_no_bk$df.residual, lower.tail = F)
pchisq(model_no_bk$deviance - model$deviance, model_no_bk$df.residual-model$df.residual, lower.tail = F)
anova(model_no_bk, model,test='Chisq')
model_bk_yr = glm(LC ~ BK + YR, family = "binomial",data = case2002)
summary(model_bk_yr)
pchisq(model_bk_yr$deviance, model_bk_yr$df.residual, lower.tail = F)
pchisq(model_bk_yr$deviance - model$deviance, model_bk_yr$df.residual-model$df.residual, lower.tail = F)
anova(model_bk_yr, model,test='Chisq')
AIC(model, model_no_bk, model_bk_yr)
BIC(model, model_no_bk, model_bk_yr)
1 - (model$deviance/model$null.deviance)
1 - (model_no_bk$deviance/model_no_bk$null.deviance)
1 - (model_bk_yr$deviance/model_bk_yr$null.deviance)
predict(model_bk_yr, data.frame(YR=mean(case2002$YR), BK=unique(case2002$BK)), type = 'response')
predict(model_bk_yr, data.frame(YR=0, BK=unique(case2002$BK)), type = 'response')
table(case2002$LC)/nrow(case2002)
sum(diag(table(case2002$LC, round(predict(model_bk_yr, case2002, type='response')))))/nrow(case2002)
model_null = glm(LC ~ 0, family = "binomial",data = case2002)
summary(model_null)
pchisq(model_null$deviance, model_null$df.residual, lower.tail = F)
sum(diag(table(case2002$LC, round(predict(model_null, case2002, type='response')))))/nrow(case2002)
neg_log_likelihood<-function(intercept, slope){
# Your code here
log_odd = intercept+slope*data$YR
p.LC = 1/(1+exp(-log_odd))
p.l = ifelse(data$LC == 'LunCancer',p.LC,1-p.LC)
return(-sum(log(p.l)))
}
neg_log_likelihood<-function(intercept, slope){
# Your code here
log_odd = intercept + slope*case2002$YR
proba_LC = 1/(1+exp(-log_odd))
proba = ifelse(case2002$LC == 'LungCancer', proba_LC, 1- proba_LC)
-sum(log(proba))
}
#If you implement correctly, the code below:
# install.packages('optimx')
library(optimx)
target <- function(pair) neg_log_likelihood(pair[1], pair[2])
ans <- optimx(par=c(-1,-1), fn = target)
print(ans$p1[1])
print(ans$p2[1])
#Should give the intercept and the slope very close to the result from:
model = glm(LC ~ YR, family = "binomial", data = case2002)
summary(model)
neg_log_likelihood<-function(intercept, slope){
# Your code here
log_odd = intercept+slope*data$YR
p.LC = 1/(1+exp(-log_odd))
p.l = ifelse(data$LC == 'LungCancer',p.LC,1-p.LC)
return(-sum(log(p.l)))
}
#If you implement correctly, the code below:
# install.packages('optimx')
library(optimx)
target <- function(pair) neg_log_likelihood(pair[1], pair[2])
?optimax()
?optimax
?optimx
target <- function(pair) neg_log_likelihood(pair[1], pair[2])
ans <- optimx(par=c(-1,-1), fn = target)
print(ans$p1[1])
print(ans$p2[1])
model = glm(LC ~ YR, family = "binomial", data = case2002)
summary(model)
table(truth = data$LC, prediction = LC.predicted, type = "response")
table(truth = data$LC, prediction = LC.predicted)
c.mat <- table(truth = data$LC, prediction = LC.predicted)
nrow(data)
accuracy <- (diag(table(c.mat))/nrow(data))
accuracy
accuracy <- sum(diag(table(c.mat))/nrow(data))
accuracy
sum(diag(table(c.mat))
accuracy <- sum(diag(table(c.mat)))/nrow(data)
accuracy <- sum(diag(table(c.mat)))/nrow(data)
accuracy
sum(diag(table(c.mat)))
c.mat
diag(c.mat)
sum(diag(c.mat))
accuracy <- sum(diag(c.mat))/nrow(data)
accuracy
?rnorm()
library(shiny)
library(grid)
setwd("~/NYCDSA/Capstone/NYCDSA_Capstone/Cherie")
ca11_18 = read.csv("./data/cali_2011_2018.csv")
ca11_18.describe
summary(ca11_18)
cal11_18[4:]
cal11_18[,4:]
cal11_18[:,4:]
cal11_18[,4:]
cal11_18[,4]
ca11_18[,4:]
ca11_18
ca11_18[,4]
ca11_18[,4:]
dim(ca11_18)
ca11_18[,4:255]
pairs(ca11_18[,4:255])
pairs(ca11_18["SizeRank","avg_rent"])
pairs(ca11_18["SizeRank"],ca11_18["avg_rent"])
scatterplot(ca11_18["SizeRank"],ca11_18["avg_rent"])
scatter(ca11_18["SizeRank"],ca11_18["avg_rent"])
plot(x = ca11_18["SizeRank"], y = ca11_18["avg_rent"],
xlab = "SizeRank",
ylab = "avg_rent")
attach(mtcars)
plot(x = ca11_18["SizeRank"], y = ca11_18["avg_rent"],
xlab = "SizeRank",
ylab = "avg_rent")
plot(x = ca11_18["SizeRank"], y = ca11_18["avg_rent"],
xlab = "SizeRank",
ylab = "avg_rent", pch = 19)
plot(x = ca11_18["SizeRank"], y = ca11_18["avg_rent"],
xlab = "SizeRank",
ylab = "avg_rent", pch = 19
ylim=c(0,2000))
plot(x = ca11_18["SizeRank"], y = ca11_18["avg_rent"],
xlab = "SizeRank",
ylab = "avg_rent",
pch = 19,
ylim=c(0,2000))
?plot
ca11_18["SizeRank"]
avg_rent = ca11_18['avg_rent']
avg_rent
plot(SizeRank, avg_rent,
xlab = "SizeRank",
ylab = "avg_rent",
pch = 19,
ylim=c(0,2000))
SizeRank = ca11_18["SizeRank"]
avg_rent = ca11_18['avg_rent']
plot(SizeRank, avg_rent,
xlab = "SizeRank",
ylab = "avg_rent",
pch = 19,
ylim=c(0,2000))
ca11_18['SizeRank', 'avg_rent']
ca11_18[['SizeRank', 'avg_rent']]
